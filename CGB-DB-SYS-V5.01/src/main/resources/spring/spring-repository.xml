<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 引入db.properties小配置文件,系统底层会创建properties对象,其中封装了文件中的信息以键值对的形式存储在map中 -->
	<!-- 该标签等效于bean标签 -->
	<util:properties id="cfg"
		location="classpath:db.properties" />

	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close" lazy-init="false">
		<property name="DriverClassName" value="#{cfg.jdbcDriver}" />
		<property name="Url" value="#{cfg.jdbcUrl}" />
		<property name="Username" value="#{cfg.jdbcUser}" />
		<property name="Password" value="#{cfg.jdbcPassword}" />
	</bean>

	<!-- 借助此Bean对象创建SqlSessionFactory对象 ，当我们调用工厂对象的getBean方法获取id为sqlSessionFactory 
		的对象时，系统会返回SqlSessionFactoryBean对象的getObject 方法返回的对象。 -->
	<!-- SqlSessionFactoryBean这个类组合了sqlSessionFactory接口,调用getObject()方法返回的是这个接口的一个实现类的实例对象, 
		DefaultSqlSessionFactory对象,底层也是调用builder对象的build()方法为其赋值 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="DataSource" ref="dataSource" />
		<!-- 设置mapper文件的位置 -->
		<property name="MapperLocations"
			value="classpath*:mapper/sys/*.xml" />
	</bean>
	
	<!-- 引入手写接口的实现类 -->
	<!-- <bean id="defaultSysLogDao"
		class="com.db.sys.dao.defaultSysLogDao"></bean> -->

	<!-- 扫描该路径下的包,带有注解的类交给spring管理,扫描该包下手写的mapper接口的实现类 -->
	<!-- <context:component-scan
		base-package="com.db.sys.dao"></context:component-scan> -->

	<!-- 通过此bean对象扫描指定包下的dao接口，并基于接口创建其实现类对象(代理对象) -->
	<bean id="daoScanner"
		class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="BasePackage" value="com.db.**.dao" />
		<!-- 当spring容器只有一个sqlSessionFactory时如下配置可以不写 -->
		<property name="SqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>

</beans>